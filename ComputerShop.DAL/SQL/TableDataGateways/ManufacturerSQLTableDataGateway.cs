using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

//SQL Server Interfaces
using System.Data;
using System.Data.Common;
using System.Data.SqlClient;

//Debugging
using System.Diagnostics;

// Import DataRecord Classes
using ComputerShop.DAL.SQL.DataRecords;

namespace ComputerShop.DAL.SQL.TableDataGateways
{
	public class ManufacturerSQLTableDataGateway : SQLTableDataGatewayBase
	{
		#region Constructor
        /// <summary> 
        ///     Constructs a ManufacturerSQLTableDataGateWay      
        /// </summary>
        /// <param name="connectionString">The connection string to connect to the database.</param>
		public ManufacturerSQLTableDataGateway(string connectionString)
			: base(connectionString)
		{
		}
		#endregion

        /// <summary>
        ///     Selects an individual ManufacturerDataRecord from the database.
        /// </summary>
        /// <param name="manufacturer_id">The ID of the ManufacturerDataRecord to be returned</param>
        /// <returns>A ManufacturerDataRecord from the database with the specified manufacturer_id</returns>
        /// <exception cref="System.ArgumentNullException">Thrown if manufacturer_id is null</exception>
        /// <exception cref="System.Data.SqlClient.SqlException">Thrown if the SQL Command fails</exception>"
		public ManufacturerDataRecord Select(int manufacturer_id)
		{
            // check for null value
            if (manufacturer_id == null)
            {
                throw new ArgumentNullException("manufacturer_id", "manufacturer_id cannot be null");                
            }                

            // create a new ManufacturerDataRecord to populate and return
			ManufacturerDataRecord record = new ManufacturerDataRecord();

            // the raw parameterized SQL statement
			string selectSQL = "SELECT * from Manufacturers WHERE manufacturer_id = @manufacturer_id";

            // create the sql command
			using (SqlCommand cmd = new SqlCommand(selectSQL, this.connection))
			{
				try
				{
					// manufacturer_id
					SqlParameter manufacturerIDParam = new SqlParameter("@manufacturer_id", manufacturer_id);
					cmd.Parameters.Add(manufacturerIDParam);
				}
				catch (Exception ex)
				{
					Debug.WriteLine(ex.Message);
					throw;
				}

				try
				{
					using (SqlDataReader reader = cmd.ExecuteReader())
					{
						while (reader.Read())
						{
							record.ManufacturerID = (int)reader["manufacturer_id"];
							record.Name = (string)reader["name"];
						}
					}
				}
				catch (SqlException ex)
				{
					Debug.WriteLine(ex.Message);
					throw;
				}
			}

			return record;
		}

		public void Insert(string name)
		{
			// We only insert the name as the id is generated by the database.
			string insertSQL = "INSERT INTO Manufacturers(name) VALUES(@name)";

			using (SqlCommand cmd = new SqlCommand(insertSQL, this.connection))
			{
				try
				{
					//name
					SqlParameter nameParam = new SqlParameter("@name", name);
					cmd.Parameters.Add(nameParam);
				}
				catch (Exception ex)
				{
					Debug.WriteLine(ex.Message);
					throw;
				}

				try
				{
					// Execute the Query
					cmd.ExecuteNonQuery();
				}
				catch (SqlException ex)
				{
					Debug.WriteLine(ex.Message);
					throw; //throw new DataMapperInsertException("Failed to insert new Manufacturer", ex);
				}
			}
		}

		public void Update(int manufacturer_id, string name)
		{
			string updateSQL = "UPDATE Manufacturers SET name = @name WHERE manufacturer_id = @manufacturer_id";

			using (SqlCommand cmd = new SqlCommand(updateSQL, this.connection))
			{
				try
				{
					//name
					SqlParameter manufacturerNameParam = new SqlParameter("@name", name);
					cmd.Parameters.Add(manufacturerNameParam);

					//manufacturer_id
					SqlParameter manufacturerIDParam = new SqlParameter("@manufacturer_id", manufacturer_id);
					cmd.Parameters.Add(manufacturerIDParam);
				}
				catch (Exception ex)
				{
					Debug.WriteLine(ex.Message);
					throw;
				}

				try
				{
					cmd.ExecuteNonQuery();
				}
				catch (SqlException ex)
				{
					Debug.WriteLine(ex.Message);
					throw; // throw new DataMapperUpdateException("Failed to update Manufacturer", ex);
				}
			}
		}

		public void Delete(int manufacturer_id)
		{
			string deleteSQL = "DELETE from Manufacturers WHERE manufacturer_id = @manufacturer_id";

			using (SqlCommand cmd = new SqlCommand(deleteSQL, this.connection))
			{
				try
				{
					//manufacturer_id
					SqlParameter manufacturerIDParam = new SqlParameter("@manufacturer_id", manufacturer_id);
					cmd.Parameters.Add(manufacturerIDParam);
				}
				catch (Exception ex)
				{
					Debug.WriteLine(ex.Message);
					throw;
				}

				try
				{
					cmd.ExecuteNonQuery();
				}
				catch (SqlException ex)
				{
					Debug.WriteLine(ex.Message);
					throw; //throw new DataMapperDeleteException("Failed to delete Manufacturer", ex);
				}
			}
		}

		public IList<ManufacturerDataRecord> GetAll()
		{
			//this will hold the records.
			DataTable manufacturersTable = new DataTable();
			List<ManufacturerDataRecord> list = new List<ManufacturerDataRecord>();

			//get all the gpu_id's
			string sql = "SELECT manufacturer_id FROM Manufacturers ORDER BY manufacturer_id";

			using (SqlCommand cmd = new SqlCommand(sql, this.connection))
			{
				SqlDataReader reader = cmd.ExecuteReader();

				manufacturersTable.Load(reader);
				reader.Close();
			}

			foreach (DataRow row in manufacturersTable.Rows)
			{
				ManufacturerDataRecord manufacturer = Select((int)row[0]);
				list.Add(manufacturer);
			}

			return list;
		}
	}
}
