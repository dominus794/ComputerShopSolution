using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Diagnostics;
using System.Transactions;
using System.Data;

using ComputerShop.Interfaces;
using ComputerShop.Domain;
using ComputerShop.DAL.SQLDataSet;
using ComputerShop.DAL.SQLDataSet.ComputerShopDBTableAdapters;

namespace ComputerShop.DataMappers.SQLDataSet
{
	public class SQLDataSetDesktopDataMapper : SQLDataSetDataMapperBase<Desktop>
	{
		/*
		private ManufacturersTableAdapter manufacturersTableAdapter;
		private CPUsTableAdapter cpusTableAdapter;
		private RamModulesTableAdapter ramModulesTableAdapter;
		private HDDsTableAdapter hddsTableAdapter;
		private GPUsTableAdapter gpusTableAdapter;
		private DesktopsTableAdapter desktopsTableAdapter;		
		private DesktopRamModulesTableAdapter desktopRamModulesTableAdapter;
		private DesktopHDDsTableAdapter desktopHDDsTableAdapter;
		private DesktopGPUsTableAdapter desktopGPUsTableAdapter;
		*/
		public SQLDataSetDesktopDataMapper()
		{
			Debug.WriteLine("In SQLDataSetDesktopDataMapper Constructor");
			/*
			manufacturersTableAdapter = new ManufacturersTableAdapter();
			manufacturersTableAdapter.Fill(shopDB.Manufacturers);
			cpusTableAdapter = new CPUsTableAdapter();
			cpusTableAdapter.Fill(shopDB.CPUs);
			ramModulesTableAdapter = new RamModulesTableAdapter();
			ramModulesTableAdapter.Fill(shopDB.RamModules);
			hddsTableAdapter = new HDDsTableAdapter();
			hddsTableAdapter.Fill(shopDB.HDDs);
			gpusTableAdapter = new GPUsTableAdapter();
			gpusTableAdapter.Fill(shopDB.GPUs);
			desktopsTableAdapter = new DesktopsTableAdapter();
			desktopsTableAdapter.Fill(shopDB.Desktops);
			desktopRamModulesTableAdapter = new DesktopRamModulesTableAdapter();
			desktopRamModulesTableAdapter.Fill(shopDB.DesktopRamModules);
			desktopHDDsTableAdapter = new DesktopHDDsTableAdapter();
			desktopHDDsTableAdapter.Fill(shopDB.DesktopHDDs);
			desktopGPUsTableAdapter = new DesktopGPUsTableAdapter();
			desktopGPUsTableAdapter.Fill(shopDB.DesktopGPUs);
			*/
		}

		public override void Insert(Desktop data)
		{
			try
			{
				using (TransactionScope transaction = new TransactionScope())
				{
					//add a new row to the dataset's Desktops dataTable.
					ComputerShopDB.DesktopsRow newRow = db.shopDB.Desktops.AddDesktopsRow(db.shopDB.Manufacturers.FindByManufacturerID(data.Manufacturer.ID), data.Model, data.Price,
																				db.shopDB.CPUs.FindByCpuID(data.Cpu.ID), 1);

					//update the desktopsTable - this needs to be done before we can update the other tables, as we need the desktop_id,
					//which is generated by SQLServer.
					//TODO: figure out how to make AddDesktop transactional.	
					//update the desktops table.
					db.desktopsTableAdapter.Update(db.shopDB.Desktops);
					//Debug.WriteLine("New Desktop Row ID:{0}", newRow["desktop_id"]);


					//add a new row for each desktop ram module
					foreach (KeyValuePair<IRamModule, int> modules in data.RamModuleCollection.RamModules)
					{
						IRamModule ram = modules.Key;
						short quantity = (short)modules.Value;

						db.shopDB.DesktopRamModules.AddDesktopRamModulesRow(newRow, db.shopDB.RamModules.FindByRamID(ram.ID), quantity);
					}

					//add a new row for each desktop hdd.
					foreach (KeyValuePair<IHDD, int> drives in data.HddCollection.HDDs)
					{
						IHDD hdd = drives.Key;
						short quantity = (short)drives.Value;

						db.shopDB.DesktopHDDs.AddDesktopHDDsRow(newRow, db.shopDB.HDDs.FindByHddID(hdd.ID), quantity);
					}

					//add a new row for each desktop gpu.
					foreach (KeyValuePair<IGPU, int> cards in data.GpuCollection.GPUs)
					{
						IGPU gpu = cards.Key;
						short quantity = (short)cards.Value;

						db.shopDB.DesktopGPUs.AddDesktopGPUsRow(newRow, db.shopDB.GPUs.FindByGpuID(gpu.ID), quantity);
					}

					//update the database.
					//desktopsTable.Update(shopDB.Desktops);
					db.desktopRamModulesTableAdapter.Update(db.shopDB.DesktopRamModules);
					db.desktopHDDsTableAdapter.Update(db.shopDB.DesktopHDDs);
					db.desktopGPUsTableAdapter.Update(db.shopDB.DesktopGPUs);

					//commit the transaction
					transaction.Complete();
				}
			}
			catch (Exception ex)
			{
				db.shopDB.Desktops.RejectChanges();
				db.shopDB.DesktopRamModules.RejectChanges();
				db.shopDB.DesktopHDDs.RejectChanges();
				db.shopDB.DesktopGPUs.RejectChanges();
				Debug.WriteLine(ex.Message);
				throw;	
			}							
		}

		public override void Delete(Desktop data)
		{
			//begin transaction
				//delete desktopGpu's records
				//delete desktopHdd's records
				//delete desktopRamModule's records
				//delete desktop record
			//end transaction

			try
			{
				using (TransactionScope transaction = new TransactionScope())
				{
					//add a new row to the dataset's Desktops dataTable.
					ComputerShopDB.DesktopsRow desktopRow = db.shopDB.Desktops.FindByDesktopID(data.ID);

					//remove this desktops ram, hdds, and gpu rows from DesktopRamModules, DesktopHDDs and DesktopGPUs respectively
					ComputerShopDB.DesktopRamModulesRow[] desktopRamModulesRows = desktopRow.GetDesktopRamModulesRows();
					foreach (ComputerShopDB.DesktopRamModulesRow desktopRamModuleRow in desktopRamModulesRows)
					{
						desktopRamModuleRow.Delete();
						//shopDB.DesktopRamModules.RemoveDesktopRamModulesRow(desktopRamModuleRow);
					}
					db.desktopRamModulesTableAdapter.Update(db.shopDB.DesktopRamModules);

					ComputerShopDB.DesktopHDDsRow[] desktopHDDsRows = desktopRow.GetDesktopHDDsRows();
					foreach (ComputerShopDB.DesktopHDDsRow desktopHDDsRow in desktopHDDsRows)
					{
						desktopHDDsRow.Delete();
						//shopDB.DesktopHDDs.RemoveDesktopHDDsRow(desktopHDDsRow);
					}
					db.desktopHDDsTableAdapter.Update(db.shopDB.DesktopHDDs);

					ComputerShopDB.DesktopGPUsRow[] desktopGPUsRows = desktopRow.GetDesktopGPUsRows();
					foreach (ComputerShopDB.DesktopGPUsRow desktopGPUsRow in desktopGPUsRows)
					{
						desktopGPUsRow.Delete();
						//shopDB.DesktopGPUs.RemoveDesktopGPUsRow(desktopGPUsRow);
					}
					db.desktopGPUsTableAdapter.Update(db.shopDB.DesktopGPUs);

					//now delete the desktop record from the Desktops datatable.
					desktopRow.Delete();
					//and update the table
					db.desktopsTableAdapter.Update(db.shopDB.Desktops);

					//commit the transaction
					transaction.Complete();
				}
			}
			catch (Exception ex)
			{
				db.shopDB.Desktops.RejectChanges();
				db.shopDB.DesktopRamModules.RejectChanges();
				db.shopDB.DesktopHDDs.RejectChanges();
				db.shopDB.DesktopGPUs.RejectChanges();
				Debug.WriteLine(ex.Message);
				throw;				
			}
		}

		public override Desktop Select(int id)
		{
			ComputerShopDB.DesktopsRow desktopRow = db.shopDB.Desktops.FindByDesktopID(id);

			Desktop desktop;
			Manufacturer desktopManufacturer;
			CPU desktopProcessor;
			//SortedList<IRamModule, int> desktopRamModules = new SortedList<IRamModule, int>();
			//SortedList<IHDD, int> desktopHdds = new SortedList<IHDD, int>();
			//SortedList<IGPU, int> desktopGpus = new SortedList<IGPU, int>();
			IRamModuleCollection desktopRamModules = new RamModuleCollection();
			IHDDCollection desktopHdds = new HDDCollection();
			IGPUCollection desktopGpus = new GPUCollection();

			//get the desktop's manufacturer.
			desktopManufacturer = new Manufacturer(desktopRow.ManufacturersRow.ManufacturerID, desktopRow.ManufacturersRow.Name);

			//get the desktop's cpu.
			ComputerShopDB.CPUsRow desktopCPUsRow = desktopRow.CPUsRow;
			desktopProcessor = new CPU(desktopCPUsRow.CpuID,
									   new Manufacturer(desktopCPUsRow.ManufacturersRow.ManufacturerID, desktopCPUsRow.ManufacturersRow.Name),
														desktopCPUsRow.Model,
														desktopCPUsRow.Price,
														(float)desktopCPUsRow.ClockSpeed,
														(CPUFormFactor)Enum.Parse(typeof(CPUFormFactor), desktopCPUsRow.CpuFormFactor),
														(CPUCoreType)Enum.Parse(typeof(CPUCoreType), desktopCPUsRow.NoOfCores));


			//get each ram module.
			ComputerShopDB.DesktopRamModulesRow[] desktopRamModuleRows = desktopRow.GetDesktopRamModulesRows();
			foreach (ComputerShopDB.DesktopRamModulesRow desktopRamModuleRow in desktopRamModuleRows)
			{
				//get the ram module.
				ComputerShopDB.RamModulesRow moduleRow = desktopRamModuleRow.RamModulesRow;
				//navigate to manufacturer
				ComputerShopDB.ManufacturersRow manufacturerRow = moduleRow.ManufacturersRow;
				//create a ram module.
				RamModule module = new RamModule(moduleRow.RamID,
												 new Manufacturer(manufacturerRow.ManufacturerID, manufacturerRow.Name),
												 moduleRow.Model,
												 moduleRow.Price,
												 moduleRow.ClockSpeed,
												 (DDRVersion)Enum.Parse(typeof(DDRVersion), moduleRow.DDRVersion),
												 (RAMFormFactor)Enum.Parse(typeof(RAMFormFactor), moduleRow.RamFormFactor),
												 moduleRow.Size);

				//add to the desktopRamModules sortedlist.
				desktopRamModules.AddRamModule(module, desktopRamModuleRow.Quantity);
			}

			//get each hdd
			ComputerShopDB.DesktopHDDsRow[] desktopHddsRows = desktopRow.GetDesktopHDDsRows();
			foreach (ComputerShopDB.DesktopHDDsRow desktopHddRow in desktopHddsRows)
			{
				//get the harddrive.
				ComputerShopDB.HDDsRow hddRow = desktopHddRow.HDDsRow;
				//navigate to manufacturer
				ComputerShopDB.ManufacturersRow manufacturerRow = hddRow.ManufacturersRow;
				//create a Harddrive
				HDD hdd = new HDD(hddRow.HddID,
											  new Manufacturer(manufacturerRow.ManufacturerID, manufacturerRow.Name),
											  hddRow.Model,
											  hddRow.Price,
											  hddRow.Capacity,
											  (HDDFormFactor)Enum.Parse(typeof(HDDFormFactor), hddRow.HddFormFactor),
											  (HDDInterfaceType)Enum.Parse(typeof(HDDInterfaceType), hddRow.HddInterface),
											  (HDDType)Enum.Parse(typeof(HDDType), hddRow.HddType),
											  hddRow.Speed);

				//add to the desktopHdds sortedlist.
				desktopHdds.AddHDD(hdd, desktopHddRow.Quantity);
			}

			//get each gpu
			ComputerShopDB.DesktopGPUsRow[] desktopGPUsRows = desktopRow.GetDesktopGPUsRows();
			foreach (ComputerShopDB.DesktopGPUsRow desktopGPUsRow in desktopGPUsRows)
			{
				//get the GPU
				ComputerShopDB.GPUsRow gpuRow = desktopGPUsRow.GPUsRow;
				//navigate to manufacturer
				ComputerShopDB.ManufacturersRow manufacturerRow = gpuRow.ManufacturersRow;
				//create a GraphicsCard
				GPU gpu = new GPU(gpuRow.GpuID,
								  new Manufacturer(manufacturerRow.ManufacturerID, manufacturerRow.Name),
								  gpuRow.Model,
								  gpuRow.Price,
								  gpuRow.GpuModel.Trim(),
								  (ushort)gpuRow.GpuClockSpeed,
								  (ushort)gpuRow.VRamSize,
								  (ushort)gpuRow.VRamClockSpeed,
								  (GDDRVersion)Enum.Parse(typeof(GDDRVersion), gpuRow.GDDRVersion),
								  (GPUType)Enum.Parse(typeof(GPUType), gpuRow.GpuType));

				//add to the desktopGpus sortedlist.
				desktopGpus.AddGPU(gpu, desktopGPUsRow.Quantity);
			}

			//create the desktop
			desktop = new Desktop(desktopRow.DesktopID,
								  desktopManufacturer,
								  desktopRow.Model,
								  desktopRow.Price,
								  desktopProcessor,
								  desktopRamModules,
								  desktopHdds,
								  desktopGpus);

			return desktop;
		}

		public override void Update(Desktop data)
		{
			try
			{
				using (TransactionScope transaction = new TransactionScope())
				{
					//add a new row to the dataset's Desktops dataTable.
					ComputerShopDB.DesktopsRow desktopRow = db.shopDB.Desktops.FindByDesktopID(data.ID);

					//update the row manually
					desktopRow.ManufacturerID = data.Manufacturer.ID;
					desktopRow.ManufacturersRow = db.shopDB.Manufacturers.FindByManufacturerID(data.Manufacturer.ID);
					desktopRow.Model = data.Model;
					desktopRow.Price = data.Price;
					desktopRow.CpuID = data.Cpu.ID;
					desktopRow.CPUsRow = db.shopDB.CPUs.FindByCpuID(data.Cpu.ID);

					//remove this desktops ram, hdds, and gpu rows from DesktopRamModules, DesktopHDDs and DesktopGPUs respectively
					ComputerShopDB.DesktopRamModulesRow[] desktopRamModulesRows = desktopRow.GetDesktopRamModulesRows();
					foreach (ComputerShopDB.DesktopRamModulesRow desktopRamModuleRow in desktopRamModulesRows)
					{
						desktopRamModuleRow.Delete();
						//shopDB.DesktopRamModules.RemoveDesktopRamModulesRow(desktopRamModuleRow);
					}
					db.desktopRamModulesTableAdapter.Update(db.shopDB.DesktopRamModules);

					ComputerShopDB.DesktopHDDsRow[] desktopHDDsRows = desktopRow.GetDesktopHDDsRows();
					foreach (ComputerShopDB.DesktopHDDsRow desktopHDDsRow in desktopHDDsRows)
					{
						desktopHDDsRow.Delete();
						//shopDB.DesktopHDDs.RemoveDesktopHDDsRow(desktopHDDsRow);
					}
					db.desktopHDDsTableAdapter.Update(db.shopDB.DesktopHDDs);

					ComputerShopDB.DesktopGPUsRow[] desktopGPUsRows = desktopRow.GetDesktopGPUsRows();
					foreach (ComputerShopDB.DesktopGPUsRow desktopGPUsRow in desktopGPUsRows)
					{
						desktopGPUsRow.Delete();
						//shopDB.DesktopGPUs.RemoveDesktopGPUsRow(desktopGPUsRow);
					}
					db.desktopGPUsTableAdapter.Update(db.shopDB.DesktopGPUs);

					//TODO: EditDesktop not working - as unable to remove previous ram,hdds,gpus for some reason
					//sync the database
					//desktopsRamModulesTable.Update(shopDB.DesktopRamModules);
					//desktopsHDDsTable.Update(shopDB.DesktopHDDs);
					//desktopsGPUsTable.Update(shopDB.DesktopGPUs);

					//add a new row for each desktop ram module
					foreach (KeyValuePair<IRamModule, int> modules in data.RamModuleCollection.RamModules)
					{
						IRamModule ram = modules.Key;
						short quantity = (short)modules.Value;

						db.shopDB.DesktopRamModules.AddDesktopRamModulesRow(desktopRow, db.shopDB.RamModules.FindByRamID(ram.ID), quantity);
					}

					//add a new row for each desktop hdd.
					foreach (KeyValuePair<IHDD, int> drives in data.HddCollection.HDDs)
					{
						IHDD hdd = drives.Key;
						short quantity = (short)drives.Value;

						db.shopDB.DesktopHDDs.AddDesktopHDDsRow(desktopRow, db.shopDB.HDDs.FindByHddID(hdd.ID), quantity);
					}

					//add a new row for each desktop gpu.
					foreach (KeyValuePair<IGPU, int> cards in data.GpuCollection.GPUs)
					{
						IGPU gpu = cards.Key;
						short quantity = (short)cards.Value;

						db.shopDB.DesktopGPUs.AddDesktopGPUsRow(desktopRow, db.shopDB.GPUs.FindByGpuID(gpu.ID), quantity);
					}

					//update the database.tables.
					db.desktopsTableAdapter.Update(db.shopDB.Desktops);
					db.desktopRamModulesTableAdapter.Update(db.shopDB.DesktopRamModules);
					db.desktopHDDsTableAdapter.Update(db.shopDB.DesktopHDDs);
					db.desktopGPUsTableAdapter.Update(db.shopDB.DesktopGPUs);

					//commit the transaction
					transaction.Complete();
				}
			}
			catch (Exception ex)
			{
				db.shopDB.Desktops.RejectChanges();
				db.shopDB.DesktopRamModules.RejectChanges();
				db.shopDB.DesktopHDDs.RejectChanges();
				db.shopDB.DesktopGPUs.RejectChanges();
				Debug.WriteLine(ex.Message);
				throw;					
			}
		}

		public override IList<Desktop> GetAll()
		{
			IList<Desktop> desktops = new List<Desktop>();

			DataRowCollection desktopRows = db.shopDB.Desktops.Rows;

			//navigate to the desktoprammodules table.
			foreach (ComputerShopDB.DesktopsRow desktopRow in desktopRows)
			{
				Desktop desktop;
				Manufacturer desktopManufacturer;
				CPU desktopProcessor;
				//SortedList<IRamModule, int> desktopRamModules = new SortedList<IRamModule, int>();
				//SortedList<IHDD, int> desktopHdds = new SortedList<IHDD, int>();
				//SortedList<IGPU, int> desktopGpus = new SortedList<IGPU, int>();
				IRamModuleCollection desktopRamModules = new RamModuleCollection();
				IHDDCollection desktopHdds = new HDDCollection();
				IGPUCollection desktopGpus = new GPUCollection();
				
				//get the desktop's manufacturer.
				desktopManufacturer = new Manufacturer(desktopRow.ManufacturersRow.ManufacturerID, desktopRow.ManufacturersRow.Name);

				//get the desktop's cpu.
				ComputerShopDB.CPUsRow desktopCPUsRow = desktopRow.CPUsRow;
				desktopProcessor = new CPU(desktopCPUsRow.CpuID,
										   new Manufacturer(desktopCPUsRow.ManufacturersRow.ManufacturerID, desktopCPUsRow.ManufacturersRow.Name),
															desktopCPUsRow.Model,
															desktopCPUsRow.Price,
															(float)desktopCPUsRow.ClockSpeed,
															(CPUFormFactor)Enum.Parse(typeof(CPUFormFactor), desktopCPUsRow.CpuFormFactor),
															(CPUCoreType)Enum.Parse(typeof(CPUCoreType), desktopCPUsRow.NoOfCores));

				
				//get each ram module.
				ComputerShopDB.DesktopRamModulesRow[] desktopRamModuleRows = desktopRow.GetDesktopRamModulesRows();
				foreach (ComputerShopDB.DesktopRamModulesRow desktopRamModuleRow in desktopRamModuleRows)
				{
					//get the ram module.
					ComputerShopDB.RamModulesRow moduleRow = desktopRamModuleRow.RamModulesRow;
					//navigate to manufacturer
					ComputerShopDB.ManufacturersRow manufacturerRow = moduleRow.ManufacturersRow;
					//create a ram module.
					RamModule module = new RamModule(moduleRow.RamID,
													 new Manufacturer(manufacturerRow.ManufacturerID, manufacturerRow.Name),
													 moduleRow.Model,
													 moduleRow.Price,
													 moduleRow.ClockSpeed,
													 (DDRVersion)Enum.Parse(typeof(DDRVersion), moduleRow.DDRVersion),
													 (RAMFormFactor)Enum.Parse(typeof(RAMFormFactor), moduleRow.RamFormFactor),
													 moduleRow.Size);

					//add to the desktopRamModules sortedlist.
					desktopRamModules.AddRamModule(module, desktopRamModuleRow.Quantity);
				}

				//get each hdd
				ComputerShopDB.DesktopHDDsRow[] desktopHddsRows = desktopRow.GetDesktopHDDsRows();
				foreach (ComputerShopDB.DesktopHDDsRow desktopHddRow in desktopHddsRows)
				{
					//get the harddrive.
					ComputerShopDB.HDDsRow hddRow = desktopHddRow.HDDsRow;
					//navigate to manufacturer
					ComputerShopDB.ManufacturersRow manufacturerRow = hddRow.ManufacturersRow;
					//create a Harddrive
					HDD hdd = new HDD(hddRow.HddID,
												  new Manufacturer(manufacturerRow.ManufacturerID, manufacturerRow.Name),
												  hddRow.Model,
												  hddRow.Price,
												  hddRow.Capacity,
												  (HDDFormFactor)Enum.Parse(typeof(HDDFormFactor), hddRow.HddFormFactor),
												  (HDDInterfaceType)Enum.Parse(typeof(HDDInterfaceType), hddRow.HddInterface),
												  (HDDType)Enum.Parse(typeof(HDDType), hddRow.HddType),
												  hddRow.Speed);

					//add to the desktopHdds sortedlist.
					desktopHdds.AddHDD(hdd, desktopHddRow.Quantity);
				}

				//get each gpu
				ComputerShopDB.DesktopGPUsRow[] desktopGPUsRows = desktopRow.GetDesktopGPUsRows();
				foreach (ComputerShopDB.DesktopGPUsRow desktopGPUsRow in desktopGPUsRows)
				{
					//get the GPU
					ComputerShopDB.GPUsRow gpuRow = desktopGPUsRow.GPUsRow;
					//navigate to manufacturer
					ComputerShopDB.ManufacturersRow manufacturerRow = gpuRow.ManufacturersRow;
					//create a GraphicsCard
					GPU gpu = new GPU(gpuRow.GpuID,
									  new Manufacturer(manufacturerRow.ManufacturerID, manufacturerRow.Name),
									  gpuRow.Model,
									  gpuRow.Price,
									  gpuRow.GpuModel.Trim(),
									  (ushort)gpuRow.GpuClockSpeed,
									  (ushort)gpuRow.VRamSize,
									  (ushort)gpuRow.VRamClockSpeed,
									  (GDDRVersion)Enum.Parse(typeof(GDDRVersion), gpuRow.GDDRVersion),
									  (GPUType)Enum.Parse(typeof(GPUType), gpuRow.GpuType));

					//add to the desktopGpus sortedlist.
					desktopGpus.AddGPU(gpu, desktopGPUsRow.Quantity);
				}

				//create the desktop
				desktop = new Desktop(desktopRow.DesktopID,
									  desktopManufacturer,
									  desktopRow.Model,
									  desktopRow.Price,
									  desktopProcessor,
									  desktopRamModules,									  
									  desktopHdds,
									  desktopGpus);									  

				//add the desktop to the list.
				desktops.Add(desktop);
			}

			return desktops;
		}
	}
}
