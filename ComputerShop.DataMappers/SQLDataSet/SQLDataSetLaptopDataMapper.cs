using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Diagnostics;
using System.Transactions;
using System.Data;

using ComputerShop.Interfaces;
using ComputerShop.Domain;
using ComputerShop.DAL.SQLDataSet;
using ComputerShop.DAL.SQLDataSet.ComputerShopDBTableAdapters;

namespace ComputerShop.DataMappers.SQLDataSet
{
	public class SQLDataSetLaptopDataMapper : SQLDataSetDataMapperBase<Laptop>
	{
		/*
		private ManufacturersTableAdapter manufacturersTableAdapter;
		private CPUsTableAdapter cpusTableAdapter;
		private RamModulesTableAdapter ramModulesTableAdapter;
		private HDDsTableAdapter hddsTableAdapter;
		private GPUsTableAdapter gpusTableAdapter;
		private LaptopsTableAdapter laptopsTableAdapter;
		private LaptopRamModulesTableAdapter laptopRamModulesTableAdapter;
		*/
		public SQLDataSetLaptopDataMapper()
		{
			/*
			manufacturersTableAdapter = new ManufacturersTableAdapter();
			manufacturersTableAdapter.Fill(shopDB.Manufacturers);
			cpusTableAdapter = new CPUsTableAdapter();
			cpusTableAdapter.Fill(shopDB.CPUs);
			ramModulesTableAdapter = new RamModulesTableAdapter();
			ramModulesTableAdapter.Fill(shopDB.RamModules);
			hddsTableAdapter = new HDDsTableAdapter();
			hddsTableAdapter.Fill(shopDB.HDDs);
			gpusTableAdapter = new GPUsTableAdapter();
			gpusTableAdapter.Fill(shopDB.GPUs);
			laptopsTableAdapter = new LaptopsTableAdapter();
			laptopsTableAdapter.Fill(shopDB.Laptops);
			laptopRamModulesTableAdapter = new LaptopRamModulesTableAdapter();
			laptopRamModulesTableAdapter.Fill(shopDB.LaptopRamModules);
			*/
		}

		public override void Insert(Laptop data)
		{
			try
			{
				using (TransactionScope transaction = new TransactionScope())
				{
					//add a new row to the dataset's Laptops dataTable.
					ComputerShopDB.LaptopsRow newRow = db.shopDB.Laptops.AddLaptopsRow(db.shopDB.Manufacturers.FindByManufacturerID(data.Manufacturer.ID), data.Model, data.Price,
																					data.Weight, data.BatteryLife, data.DisplaySize,
																					db.shopDB.CPUs.FindByCpuID(data.Cpu.ID),
																					db.shopDB.HDDs.FindByHddID(data.Hdd.ID),
																					db.shopDB.GPUs.FindByGpuID(data.Gpu.ID));

					//update the laptopsTable - this needs to be done before we can update the other tables, as we need the laptop_id,
					//which is generated by SQLServer.					
					//update the laptops table.
					db.laptopsTableAdapter.Update(db.shopDB.Laptops);

					//add a new row for each desktop ram module
					foreach (KeyValuePair<IRamModule, int> modules in data.RamModuleCollection.RamModules)
					{
						IRamModule ram = modules.Key;
						short quantity = (short)modules.Value;
						db.shopDB.LaptopRamModules.AddLaptopRamModulesRow(newRow, db.shopDB.RamModules.FindByRamID(ram.ID), quantity);
					}

					//update the database.				
					db.laptopRamModulesTableAdapter.Update(db.shopDB.LaptopRamModules);

					//commit the transaction
					transaction.Complete();
				}
			}
			catch (Exception ex)
			{
				db.shopDB.Laptops.RejectChanges();
				db.shopDB.LaptopRamModules.RejectChanges();
				Debug.WriteLine(ex.Message);
				throw;
			}	
		}

		public override void Delete(Laptop data)
		{
			//begin transaction
			//delete desktopGpu's records
			//delete desktopHdd's records
			//delete desktopRamModule's records
			//delete desktop record
			//end transaction

			try
			{
				using (TransactionScope transaction = new TransactionScope())
				{
					//find the laptopsTable row.
					ComputerShopDB.LaptopsRow laptopRow = db.shopDB.Laptops.FindByLaptopID(data.ID);

					//remove this laptops ram rows from LaptopRamModules
					ComputerShopDB.LaptopRamModulesRow[] laptopRamModulesRows = laptopRow.GetLaptopRamModulesRows();
					foreach (ComputerShopDB.LaptopRamModulesRow laptopRamModuleRow in laptopRamModulesRows)
					{
						laptopRamModuleRow.Delete();
					}
					db.laptopRamModulesTableAdapter.Update(db.shopDB.LaptopRamModules);

					//now delete the laptop record from the Laptops datatable.
					laptopRow.Delete();
					//and update the table
					db.laptopsTableAdapter.Update(db.shopDB.Laptops);

					//commit the transaction
					transaction.Complete();
				}
			}
			catch (Exception ex)
			{
				db.shopDB.Laptops.RejectChanges();
				db.shopDB.LaptopRamModules.RejectChanges();
				Debug.WriteLine(ex.Message);
				throw;
			}
		}

		public override Laptop Select(int id)
		{
			ComputerShopDB.LaptopsRow laptopRow = db.shopDB.Laptops.FindByLaptopID(id);

			Laptop laptop;
			Manufacturer laptopManufacturer;
			CPU laptopProcessor;
			//SortedList<IRamModule, int> laptopRamModules = new SortedList<IRamModule, int>();				
			IRamModuleCollection laptopRamModules = new RamModuleCollection();

			//get the desktop's manufacturer.
			laptopManufacturer = new Manufacturer(laptopRow.ManufacturersRow.ManufacturerID, laptopRow.ManufacturersRow.Name);

			//get the desktop's cpu.
			ComputerShopDB.CPUsRow laptopCPUsRow = laptopRow.CPUsRow;
			laptopProcessor = new CPU(laptopCPUsRow.CpuID,
									   new Manufacturer(laptopCPUsRow.ManufacturersRow.ManufacturerID, laptopCPUsRow.ManufacturersRow.Name),
														laptopCPUsRow.Model,
														laptopCPUsRow.Price,
														(float)laptopCPUsRow.ClockSpeed,
														(CPUFormFactor)Enum.Parse(typeof(CPUFormFactor), laptopCPUsRow.CpuFormFactor),
														(CPUCoreType)Enum.Parse(typeof(CPUCoreType), laptopCPUsRow.NoOfCores));


			//get each ram module.
			ComputerShopDB.LaptopRamModulesRow[] laptopRamModuleRows = laptopRow.GetLaptopRamModulesRows();
			foreach (ComputerShopDB.LaptopRamModulesRow laptopRamModuleRow in laptopRamModuleRows)
			{
				//get the ram module.
				ComputerShopDB.RamModulesRow moduleRow = laptopRamModuleRow.RamModulesRow;
				//navigate to manufacturer
				ComputerShopDB.ManufacturersRow manufacturerRow = moduleRow.ManufacturersRow;
				//create a ram module.
				RamModule module = new RamModule(moduleRow.RamID,
												 new Manufacturer(manufacturerRow.ManufacturerID, manufacturerRow.Name),
												 moduleRow.Model,
												 moduleRow.Price,
												 moduleRow.ClockSpeed,
												 (DDRVersion)Enum.Parse(typeof(DDRVersion), moduleRow.DDRVersion),
												 (RAMFormFactor)Enum.Parse(typeof(RAMFormFactor), moduleRow.RamFormFactor),
												 moduleRow.Size);

				//add to the desktopRamModules sortedlist.
				laptopRamModules.AddRamModule(module, laptopRamModuleRow.Quantity);
			}

			//get the hdd
			ComputerShopDB.HDDsRow laptopHddRow = laptopRow.HDDsRow;
			//create the hdd
			HDD laptopHdd = new HDD(laptopHddRow.HddID,
									new Manufacturer(laptopHddRow.ManufacturersRow.ManufacturerID, laptopHddRow.ManufacturersRow.Name),
									laptopHddRow.Model,
									laptopHddRow.Price,
									laptopHddRow.Capacity,
									(HDDFormFactor)Enum.Parse(typeof(HDDFormFactor), laptopHddRow.HddFormFactor),
									(HDDInterfaceType)Enum.Parse(typeof(HDDInterfaceType), laptopHddRow.HddInterface),
									(HDDType)Enum.Parse(typeof(HDDType), laptopHddRow.HddType),
									laptopHddRow.Speed);

			//get the gpu
			ComputerShopDB.GPUsRow laptopGpuRow = laptopRow.GPUsRow;
			//create the gpu.
			GPU laptopGpu = new GPU(laptopGpuRow.GpuID,
									new Manufacturer(laptopGpuRow.ManufacturersRow.ManufacturerID, laptopGpuRow.ManufacturersRow.Name),
									laptopGpuRow.Model,
									laptopGpuRow.Price,
									laptopGpuRow.GpuModel,
									laptopGpuRow.GpuClockSpeed,
									laptopGpuRow.VRamSize,
									laptopGpuRow.VRamClockSpeed,
									(GDDRVersion)Enum.Parse(typeof(GDDRVersion), laptopGpuRow.GDDRVersion),
									(GPUType)Enum.Parse(typeof(GPUType), laptopGpuRow.GpuType));

			//create the laptop
			laptop = new Laptop(laptopRow.LaptopID,
								  laptopManufacturer,
								  laptopRow.Model,
								  laptopRow.Price,
								  laptopProcessor,
								  laptopRamModules,
								  laptopGpu,
								  laptopHdd,
								  laptopRow.Weight,
								  laptopRow.BatteryLife,
								  laptopRow.DisplaySize);

			return laptop;
		}

		public override void Update(Laptop data)
		{
			try
			{
				using (TransactionScope transaction = new TransactionScope())
				{
					//add a new row to the dataset's Laptops dataTable.
					ComputerShopDB.LaptopsRow laptopRow = db.shopDB.Laptops.FindByLaptopID(data.ID);

					//update the row manually
					laptopRow.ManufacturerID = data.Manufacturer.ID;
					laptopRow.ManufacturersRow = db.shopDB.Manufacturers.FindByManufacturerID(data.Manufacturer.ID);
					laptopRow.Model = data.Model;
					laptopRow.Price = data.Price;
					laptopRow.Weight = data.Weight;
					laptopRow.BatteryLife = data.BatteryLife;
					laptopRow.DisplaySize = data.DisplaySize;
					laptopRow.CpuID = data.Cpu.ID;
					laptopRow.CPUsRow = db.shopDB.CPUs.FindByCpuID(data.Cpu.ID);
					laptopRow.HddID = data.Hdd.ID;
					laptopRow.HDDsRow = db.shopDB.HDDs.FindByHddID(data.Hdd.ID);
					laptopRow.GpuID = data.Gpu.ID;
					laptopRow.GPUsRow = db.shopDB.GPUs.FindByGpuID(data.Gpu.ID);

					//remove this laptops ram rows from LaptopRamModules
					ComputerShopDB.LaptopRamModulesRow[] laptopRamModulesRows = laptopRow.GetLaptopRamModulesRows();
					foreach (ComputerShopDB.LaptopRamModulesRow laptopRamModuleRow in laptopRamModulesRows)
					{
						laptopRamModuleRow.Delete();
					}
					db.laptopRamModulesTableAdapter.Update(db.shopDB.LaptopRamModules);

					//add a new row for each desktop ram module
					foreach (KeyValuePair<IRamModule, int> modules in data.RamModuleCollection.RamModules)
					{
						IRamModule ram = modules.Key;
						short quantity = (short)modules.Value;
						ComputerShopDB.LaptopRamModulesRow newRow = db.shopDB.LaptopRamModules.AddLaptopRamModulesRow(laptopRow, db.shopDB.RamModules.FindByRamID(ram.ID), quantity);
					}

					//update the database.												
					db.laptopsTableAdapter.Update(db.shopDB.Laptops);
					db.laptopRamModulesTableAdapter.Update(db.shopDB.LaptopRamModules);

					//commit the transaction
					transaction.Complete();
				}
			}
			catch (Exception ex)
			{
				db.shopDB.Laptops.RejectChanges();
				db.shopDB.LaptopRamModules.RejectChanges();
				Debug.WriteLine(ex.Message);
				throw;
			}
		}

		public override IList<Laptop> GetAll()
		{
			IList<Laptop> laptops = new List<Laptop>();

			DataRowCollection laptopRows = db.shopDB.Laptops.Rows;

			//navigate to the desktoprammodules table.
			foreach (ComputerShopDB.LaptopsRow laptopRow in laptopRows)
			{
				Laptop laptop;
				Manufacturer laptopManufacturer;
				CPU laptopProcessor;
				//SortedList<IRamModule, int> laptopRamModules = new SortedList<IRamModule, int>();				
				IRamModuleCollection laptopRamModules = new RamModuleCollection();
				
				//get the desktop's manufacturer.
				laptopManufacturer = new Manufacturer(laptopRow.ManufacturersRow.ManufacturerID, laptopRow.ManufacturersRow.Name);

				//get the desktop's cpu.
				ComputerShopDB.CPUsRow laptopCPUsRow = laptopRow.CPUsRow;
				laptopProcessor = new CPU(laptopCPUsRow.CpuID,
										   new Manufacturer(laptopCPUsRow.ManufacturersRow.ManufacturerID, laptopCPUsRow.ManufacturersRow.Name),
															laptopCPUsRow.Model,
															laptopCPUsRow.Price,
															(float)laptopCPUsRow.ClockSpeed,
															(CPUFormFactor)Enum.Parse(typeof(CPUFormFactor), laptopCPUsRow.CpuFormFactor),
															(CPUCoreType)Enum.Parse(typeof(CPUCoreType), laptopCPUsRow.NoOfCores));

				
				//get each ram module.
				ComputerShopDB.LaptopRamModulesRow[] laptopRamModuleRows = laptopRow.GetLaptopRamModulesRows();
				foreach (ComputerShopDB.LaptopRamModulesRow laptopRamModuleRow in laptopRamModuleRows)
				{
					//get the ram module.
					ComputerShopDB.RamModulesRow moduleRow = laptopRamModuleRow.RamModulesRow;
					//navigate to manufacturer
					ComputerShopDB.ManufacturersRow manufacturerRow = moduleRow.ManufacturersRow;
					//create a ram module.
					RamModule module = new RamModule(moduleRow.RamID,
													 new Manufacturer(manufacturerRow.ManufacturerID, manufacturerRow.Name),
													 moduleRow.Model,
													 moduleRow.Price,
													 moduleRow.ClockSpeed,
													 (DDRVersion)Enum.Parse(typeof(DDRVersion), moduleRow.DDRVersion),
													 (RAMFormFactor)Enum.Parse(typeof(RAMFormFactor), moduleRow.RamFormFactor),
													 moduleRow.Size);

					//add to the desktopRamModules sortedlist.
					laptopRamModules.AddRamModule(module, laptopRamModuleRow.Quantity);
				}
		
				//get the hdd
				ComputerShopDB.HDDsRow laptopHddRow = laptopRow.HDDsRow;
				//create the hdd
				HDD laptopHdd = new HDD(laptopHddRow.HddID,
										new Manufacturer(laptopHddRow.ManufacturersRow.ManufacturerID, laptopHddRow.ManufacturersRow.Name),
										laptopHddRow.Model,
										laptopHddRow.Price,
										laptopHddRow.Capacity,
										(HDDFormFactor)Enum.Parse(typeof(HDDFormFactor), laptopHddRow.HddFormFactor),
										(HDDInterfaceType)Enum.Parse(typeof(HDDInterfaceType), laptopHddRow.HddInterface),
										(HDDType)Enum.Parse(typeof(HDDType), laptopHddRow.HddType),
										laptopHddRow.Speed);

				//get the gpu
				ComputerShopDB.GPUsRow laptopGpuRow = laptopRow.GPUsRow;
				//create the gpu.
				GPU laptopGpu = new GPU(laptopGpuRow.GpuID,
										new Manufacturer(laptopGpuRow.ManufacturersRow.ManufacturerID, laptopGpuRow.ManufacturersRow.Name),
										laptopGpuRow.Model,
										laptopGpuRow.Price,
										laptopGpuRow.GpuModel,
										laptopGpuRow.GpuClockSpeed,
										laptopGpuRow.VRamSize,
										laptopGpuRow.VRamClockSpeed,
										(GDDRVersion)Enum.Parse(typeof(GDDRVersion), laptopGpuRow.GDDRVersion),
										(GPUType)Enum.Parse(typeof(GPUType), laptopGpuRow.GpuType));

				//create the laptop
				laptop = new Laptop(laptopRow.LaptopID,
									  laptopManufacturer,
									  laptopRow.Model,
									  laptopRow.Price,
									  laptopProcessor,
									  laptopRamModules,
									  laptopGpu,
									  laptopHdd,
									  laptopRow.Weight,
									  laptopRow.BatteryLife,
									  laptopRow.DisplaySize);
									  						  

				//add the desktop to the list.
				laptops.Add(laptop);
			}

			return laptops;
		}		
	}
}
